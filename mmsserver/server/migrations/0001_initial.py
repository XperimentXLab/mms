# Generated by Django 5.2.1 on 2025-05-25 02:09

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import django_countries.fields
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Transaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('transaction_type', models.CharField(choices=[('DEPOSIT', 'Deposit'), ('WITHDRAWAL', 'Withdrawal'), ('TRANSFER', 'Transfer'), ('BONUS', 'Bonus')], max_length=20)),
                ('point_type', models.CharField(choices=[('MASTER', 'Master Point'), ('PROFIT', 'Profit Point'), ('AFFILIATE', 'Affiliate Point')], max_length=20)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=15)),
                ('description', models.TextField(blank=True)),
                ('status', models.CharField(default='PENDING', max_length=20)),
                ('reference', models.CharField(blank=True, max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('target_point_type', models.CharField(blank=True, choices=[('MASTER', 'Master Point'), ('PROFIT', 'Profit Point'), ('AFFILIATE', 'Affiliate Point')], max_length=20, null=True)),
                ('converted_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True)),
            ],
            options={
                'verbose_name': 'Transaction',
                'verbose_name_plural': 'Transactions',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.CharField(max_length=8, primary_key=True, serialize=False)),
                ('ic', models.CharField(max_length=12, unique=True, validators=[django.core.validators.RegexValidator('^\\d{12}$', 'IC must be 12 digits')])),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('wallet_address', models.CharField(blank=True, max_length=255, null=True, unique=True, verbose_name='Wallet Address (BEP20)')),
                ('address_line', models.CharField(blank=True, max_length=255, null=True)),
                ('address_city', models.CharField(blank=True, max_length=255, null=True)),
                ('address_state', models.CharField(blank=True, max_length=255, null=True)),
                ('address_postcode', models.CharField(blank=True, max_length=255, null=True)),
                ('address_country', django_countries.fields.CountryField(blank=True, max_length=2, null=True)),
                ('referred_by', models.CharField(blank=True, db_index=True, max_length=8, null=True, verbose_name='Referred By (User ID)')),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_superuser', models.BooleanField(default=False)),
                ('beneficiary_name', models.CharField(blank=True, max_length=255, null=True)),
                ('beneficiary_ic', models.CharField(blank=True, max_length=12, null=True, validators=[django.core.validators.RegexValidator('^\\d{12}$', 'IC must be 12 digits')])),
                ('beneficiary_relationship', models.CharField(blank=True, max_length=255, null=True)),
                ('beneficiary_phone', models.CharField(blank=True, max_length=15, null=True, validators=[django.core.validators.RegexValidator('^\\+?6?\\d{9,15}$', 'Enter a valid phone number')])),
                ('beneficiary_email', models.EmailField(blank=True, max_length=254, null=True)),
                ('ic_document', models.ImageField(blank=True, null=True, upload_to='verification_documents/', verbose_name='IC/Driving License')),
                ('verfication_status', models.CharField(choices=[('REQUIRES_ACTION', 'Requires Action'), ('UNDER_REVIEW', 'Under Review'), ('APPROVED', 'Approved'), ('REJECTED', 'Rejected')], default='REQUIRES_ACTION', max_length=20, verbose_name='Verification Status')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'ordering': ['-created_at'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Wallet',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('master_point_balance', models.DecimalField(decimal_places=2, default=0, max_digits=15)),
                ('profit_point_balance', models.DecimalField(decimal_places=2, default=0, max_digits=15)),
                ('affiliate_point_balance', models.DecimalField(decimal_places=2, default=0, max_digits=15)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='wallet', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Wallet',
                'verbose_name_plural': 'Wallets',
            },
        ),
        migrations.CreateModel(
            name='TransferRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('source_point_type', models.CharField(choices=[('MASTER', 'Master Point'), ('PROFIT', 'Profit Point'), ('AFFILIATE', 'Affiliate Point')], max_length=20)),
                ('target_point_type', models.CharField(choices=[('MASTER', 'Master Point'), ('PROFIT', 'Profit Point'), ('AFFILIATE', 'Affiliate Point')], max_length=20)),
                ('amount', models.DecimalField(decimal_places=2, help_text='Amount must be in multiples of 50', max_digits=15, validators=[django.core.validators.MinValueValidator(50)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('transaction', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='server.transaction')),
                ('wallet', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transfer_requests', to='server.wallet')),
            ],
            options={
                'verbose_name': 'Transfer Request',
                'verbose_name_plural': 'Transfer Requests',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='transaction',
            name='wallet',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transactions', to='server.wallet'),
        ),
        migrations.CreateModel(
            name='WithdrawalRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('point_type', models.CharField(choices=[('MASTER', 'Master Point'), ('PROFIT', 'Profit Point'), ('AFFILIATE', 'Affiliate Point')], max_length=20)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=15, validators=[django.core.validators.MinValueValidator(50)])),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('APPROVED', 'Approved'), ('REJECTED', 'Rejected'), ('PROCESSED', 'Processed')], default='PENDING', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('processed_at', models.DateTimeField(blank=True, null=True)),
                ('transaction', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='server.transaction')),
                ('wallet', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='withdrawal_requests', to='server.wallet')),
            ],
            options={
                'verbose_name': 'Withdrawal Request',
                'verbose_name_plural': 'Withdrawal Requests',
                'ordering': ['-created_at'],
            },
        ),
    ]
