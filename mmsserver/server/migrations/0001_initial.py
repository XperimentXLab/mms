# Generated by Django 5.2.1 on 2025-07-01 05:22

import django.contrib.auth.models
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.CharField(max_length=8, primary_key=True, serialize=False)),
                ('username', models.CharField(max_length=255, unique=True)),
                ('ic', models.CharField(max_length=12, unique=True, validators=[django.core.validators.RegexValidator('^\\d{12}$', 'IC must be 12 digits')])),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('wallet_address', models.CharField(blank=True, max_length=255, null=True, verbose_name='Wallet Address (BEP20)')),
                ('address_line', models.CharField(blank=True, max_length=255, null=True)),
                ('address_city', models.CharField(blank=True, max_length=255, null=True)),
                ('address_state', models.CharField(blank=True, max_length=255, null=True)),
                ('address_postcode', models.CharField(blank=True, max_length=255, null=True)),
                ('address_country', models.CharField(blank=True, max_length=100, null=True, verbose_name='Country')),
                ('referred_by', models.CharField(blank=True, db_index=True, max_length=8, null=True, verbose_name='Referred By (User ID)')),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_superuser', models.BooleanField(default=False)),
                ('is_campro', models.BooleanField(default=False)),
                ('beneficiary_name', models.CharField(blank=True, max_length=255, null=True)),
                ('beneficiary_ic', models.CharField(blank=True, max_length=12, null=True, validators=[django.core.validators.RegexValidator('^\\d{12}$', 'IC must be 12 digits')])),
                ('beneficiary_relationship', models.CharField(blank=True, max_length=255, null=True)),
                ('beneficiary_phone', models.CharField(blank=True, max_length=15, null=True, validators=[django.core.validators.RegexValidator('^\\+?601\\d{9,11}$', 'Enter a valid phone number')])),
                ('beneficiary_email', models.EmailField(blank=True, max_length=254, null=True)),
                ('ic_document', models.ImageField(blank=True, null=True, upload_to='verification_documents/', verbose_name='IC/Driving License')),
                ('verification_status', models.CharField(choices=[('REQUIRES_ACTION', 'Requires Action'), ('UNDER_REVIEW', 'Under Review'), ('APPROVED', 'Approved'), ('REJECTED', 'Rejected')], default='REQUIRES_ACTION', max_length=40, verbose_name='Verification Status')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'ordering': ['-created_at', 'referred_by', 'verification_status'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Asset',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=15)),
                ('is_free_campro', models.BooleanField(default=False)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assets', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Asset',
                'verbose_name_plural': 'Assets',
            },
        ),
        migrations.CreateModel(
            name='MonthlyFinalizedProfit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.IntegerField(db_index=True, help_text='The year of the finalized profit (e.g., 2024).')),
                ('month', models.IntegerField(db_index=True, help_text='The month of the finalized profit (1 for January, 12 for December).', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(12)])),
                ('finalized_profit_rate', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='The percentage profit rate applied for this month (e.g., 5.0 for 5.0%).', max_digits=7)),
                ('finalized_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when this monthly profit was recorded/finalized.')),
            ],
            options={
                'verbose_name': 'Monthly Finalized Profit',
                'verbose_name_plural': 'Monthly Finalized Profits',
                'ordering': ['-year', 'month'],
                'unique_together': {('year', 'month')},
            },
        ),
        migrations.CreateModel(
            name='OperationalProfit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('daily_profit_rate', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Manually update daily profit rate (e.g., enter 5.0 for 5.0%)', max_digits=7)),
                ('weekly_profit_rate', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Manually update weekly profit rate (e.g., enter 5.0 for 5.0%)', max_digits=7)),
                ('current_month_profit', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Manually update current month profit (e.g., enter 5.0 for 5.0%)', max_digits=7)),
                ('active_month_profit', models.IntegerField(blank=True, help_text='The month (1-12) for which profit is currently active', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(12)])),
                ('active_year_profit', models.IntegerField(blank=True, help_text='The year for which profit is currently active', null=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Operational Profit',
                'verbose_name_plural': 'Operational Profits',
                'ordering': ['-active_year_profit', '-active_month_profit'],
                'unique_together': {('active_month_profit', 'active_year_profit')},
            },
        ),
        migrations.CreateModel(
            name='Transaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('transaction_type', models.CharField(choices=[('WITHDRAWAL', 'Withdrawal'), ('CONVERT', 'Convert'), ('TRANSFER', 'Transfer'), ('DISTRIBUTION', 'Distribution'), ('AFFILIATE_BONUS', 'Affiliate Bonus'), ('INTRODUCER_BONUS', 'Introducer Bonus'), ('ASSET_PLACEMENT', 'Asset Placement'), ('ASSET_WITHDRAWAL', 'Asset Withdrawal'), ('WELCOME_BONUS', 'Welcome Bonus'), ('MIGRATION', 'Migration')], max_length=40)),
                ('point_type', models.CharField(choices=[('MASTER', 'Master Point'), ('PROFIT', 'Profit'), ('COMMISSION', 'Commission'), ('ASSET', 'Asset')], max_length=40)),
                ('request_status', models.CharField(choices=[('Pending', 'Pending'), ('Approved', 'Approved'), ('Rejected', 'Rejected')], max_length=40, null=True, verbose_name='Request Status')),
                ('amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=15)),
                ('description', models.TextField(blank=True)),
                ('reference', models.CharField(blank=True, max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('target_point_type', models.CharField(blank=True, choices=[('MASTER', 'Master Point'), ('PROFIT', 'Profit'), ('COMMISSION', 'Commission'), ('ASSET', 'Asset')], max_length=40, null=True)),
                ('converted_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True)),
                ('asset', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='transactions', to='server.asset')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='transactions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Transaction',
                'verbose_name_plural': 'Transactions',
                'ordering': ['-created_at', 'request_status', 'transaction_type', 'user'],
            },
        ),
        migrations.CreateModel(
            name='DepositLock',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount_6m_locked', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=15)),
                ('amount_1y_locked', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=15)),
                ('amount_6m_unlocked', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=15)),
                ('amount_1y_unlocked', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=15)),
                ('is_free_campro', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('deposit', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='lock_info', to='server.transaction')),
            ],
            options={
                'verbose_name': 'Deposit Lock',
                'verbose_name_plural': 'Deposit Locks',
            },
        ),
        migrations.CreateModel(
            name='Wallet',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('master_point_balance', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=15)),
                ('profit_point_balance', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=15)),
                ('affiliate_point_balance', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=15)),
                ('introducer_point_balance', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=15)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='wallet', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Wallet',
                'verbose_name_plural': 'Wallets',
            },
        ),
        migrations.AddField(
            model_name='transaction',
            name='wallet',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='transactions', to='server.wallet'),
        ),
        migrations.CreateModel(
            name='WithdrawalRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('point_type', models.CharField(choices=[('MASTER', 'Master Point'), ('PROFIT', 'Profit'), ('COMMISSION', 'Commission'), ('ASSET', 'Asset')], max_length=40)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=15, validators=[django.core.validators.MinValueValidator(50)])),
                ('actual_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=15)),
                ('fee', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=15)),
                ('fee_rate', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=2)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('processed_at', models.DateTimeField(blank=True, null=True)),
                ('transaction', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='server.transaction')),
                ('wallet', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='withdrawal_requests', to='server.wallet')),
            ],
            options={
                'verbose_name': 'Withdrawal Request',
                'verbose_name_plural': 'Withdrawal Requests',
                'ordering': ['-created_at'],
            },
        ),
    ]
